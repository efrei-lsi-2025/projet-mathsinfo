// @generated by protobuf-ts 2.9.4 with parameter server_grpc1,optimize_code_size
// @generated from protobuf file "data.proto" (package "metro_boulot_dodo", syntax proto3)
// tslint:disable
import { CanvasService } from "./data";
import type { CanvasDrawRequest } from "./data";
import { KruskalService } from "./data";
import type { Image } from "./data";
import { DijkstraService } from "./data";
import type { ShortestPathResponse } from "./data";
import type { ShortestPathRequest } from "./data";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { DataService } from "./data";
import type { Lignes } from "./data";
import type { Stations } from "./data";
import type { Intergares } from "./data";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Gares } from "./data";
import type { Empty } from "./data";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service metro_boulot_dodo.DataService
 */
export interface IDataServiceClient {
    /**
     * @generated from protobuf rpc: GetGares(metro_boulot_dodo.Empty) returns (metro_boulot_dodo.Gares);
     */
    getGares(input: Empty, options?: RpcOptions): UnaryCall<Empty, Gares>;
    /**
     * @generated from protobuf rpc: GetIntergares(metro_boulot_dodo.Empty) returns (metro_boulot_dodo.Intergares);
     */
    getIntergares(input: Empty, options?: RpcOptions): UnaryCall<Empty, Intergares>;
    /**
     * @generated from protobuf rpc: GetStations(metro_boulot_dodo.Empty) returns (metro_boulot_dodo.Stations);
     */
    getStations(input: Empty, options?: RpcOptions): UnaryCall<Empty, Stations>;
    /**
     * @generated from protobuf rpc: GetLignes(metro_boulot_dodo.Empty) returns (metro_boulot_dodo.Lignes);
     */
    getLignes(input: Empty, options?: RpcOptions): UnaryCall<Empty, Lignes>;
}
/**
 * @generated from protobuf service metro_boulot_dodo.DataService
 */
export class DataServiceClient implements IDataServiceClient, ServiceInfo {
    typeName = DataService.typeName;
    methods = DataService.methods;
    options = DataService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetGares(metro_boulot_dodo.Empty) returns (metro_boulot_dodo.Gares);
     */
    getGares(input: Empty, options?: RpcOptions): UnaryCall<Empty, Gares> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, Gares>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetIntergares(metro_boulot_dodo.Empty) returns (metro_boulot_dodo.Intergares);
     */
    getIntergares(input: Empty, options?: RpcOptions): UnaryCall<Empty, Intergares> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, Intergares>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetStations(metro_boulot_dodo.Empty) returns (metro_boulot_dodo.Stations);
     */
    getStations(input: Empty, options?: RpcOptions): UnaryCall<Empty, Stations> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, Stations>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetLignes(metro_boulot_dodo.Empty) returns (metro_boulot_dodo.Lignes);
     */
    getLignes(input: Empty, options?: RpcOptions): UnaryCall<Empty, Lignes> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, Lignes>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service metro_boulot_dodo.DijkstraService
 */
export interface IDijkstraServiceClient {
    /**
     * @generated from protobuf rpc: GetShortestPath(metro_boulot_dodo.ShortestPathRequest) returns (metro_boulot_dodo.ShortestPathResponse);
     */
    getShortestPath(input: ShortestPathRequest, options?: RpcOptions): UnaryCall<ShortestPathRequest, ShortestPathResponse>;
}
/**
 * @generated from protobuf service metro_boulot_dodo.DijkstraService
 */
export class DijkstraServiceClient implements IDijkstraServiceClient, ServiceInfo {
    typeName = DijkstraService.typeName;
    methods = DijkstraService.methods;
    options = DijkstraService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetShortestPath(metro_boulot_dodo.ShortestPathRequest) returns (metro_boulot_dodo.ShortestPathResponse);
     */
    getShortestPath(input: ShortestPathRequest, options?: RpcOptions): UnaryCall<ShortestPathRequest, ShortestPathResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ShortestPathRequest, ShortestPathResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service metro_boulot_dodo.KruskalService
 */
export interface IKruskalServiceClient {
    /**
     * @generated from protobuf rpc: GetMinimumSpanningTree(metro_boulot_dodo.Empty) returns (metro_boulot_dodo.Image);
     */
    getMinimumSpanningTree(input: Empty, options?: RpcOptions): UnaryCall<Empty, Image>;
    /**
     * @generated from protobuf rpc: GetFullTree(metro_boulot_dodo.Empty) returns (metro_boulot_dodo.Image);
     */
    getFullTree(input: Empty, options?: RpcOptions): UnaryCall<Empty, Image>;
}
/**
 * @generated from protobuf service metro_boulot_dodo.KruskalService
 */
export class KruskalServiceClient implements IKruskalServiceClient, ServiceInfo {
    typeName = KruskalService.typeName;
    methods = KruskalService.methods;
    options = KruskalService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetMinimumSpanningTree(metro_boulot_dodo.Empty) returns (metro_boulot_dodo.Image);
     */
    getMinimumSpanningTree(input: Empty, options?: RpcOptions): UnaryCall<Empty, Image> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, Image>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetFullTree(metro_boulot_dodo.Empty) returns (metro_boulot_dodo.Image);
     */
    getFullTree(input: Empty, options?: RpcOptions): UnaryCall<Empty, Image> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, Image>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service metro_boulot_dodo.CanvasService
 */
export interface ICanvasServiceClient {
    /**
     * @generated from protobuf rpc: GetCanvas(metro_boulot_dodo.CanvasDrawRequest) returns (metro_boulot_dodo.Image);
     */
    getCanvas(input: CanvasDrawRequest, options?: RpcOptions): UnaryCall<CanvasDrawRequest, Image>;
}
/**
 * @generated from protobuf service metro_boulot_dodo.CanvasService
 */
export class CanvasServiceClient implements ICanvasServiceClient, ServiceInfo {
    typeName = CanvasService.typeName;
    methods = CanvasService.methods;
    options = CanvasService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetCanvas(metro_boulot_dodo.CanvasDrawRequest) returns (metro_boulot_dodo.Image);
     */
    getCanvas(input: CanvasDrawRequest, options?: RpcOptions): UnaryCall<CanvasDrawRequest, Image> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CanvasDrawRequest, Image>("unary", this._transport, method, opt, input);
    }
}
