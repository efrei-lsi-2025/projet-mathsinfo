// @generated by protobuf-ts 2.9.4 with parameter server_grpc1,optimize_code_size
// @generated from protobuf file "data.proto" (package "metro_boulot_dodo", syntax proto3)
// tslint:disable
import { CanvasDrawRequest } from "./data";
import { Image } from "./data";
import { ShortestPathResponse } from "./data";
import { ShortestPathRequest } from "./data";
import { Lignes } from "./data";
import { Stations } from "./data";
import { Intergares } from "./data";
import { Gares } from "./data";
import { Empty } from "./data";
import type * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service metro_boulot_dodo.DataService
 */
export interface IDataService extends grpc.UntypedServiceImplementation {
    /**
     * @generated from protobuf rpc: GetGares(metro_boulot_dodo.Empty) returns (metro_boulot_dodo.Gares);
     */
    getGares: grpc.handleUnaryCall<Empty, Gares>;
    /**
     * @generated from protobuf rpc: GetIntergares(metro_boulot_dodo.Empty) returns (metro_boulot_dodo.Intergares);
     */
    getIntergares: grpc.handleUnaryCall<Empty, Intergares>;
    /**
     * @generated from protobuf rpc: GetStations(metro_boulot_dodo.Empty) returns (metro_boulot_dodo.Stations);
     */
    getStations: grpc.handleUnaryCall<Empty, Stations>;
    /**
     * @generated from protobuf rpc: GetLignes(metro_boulot_dodo.Empty) returns (metro_boulot_dodo.Lignes);
     */
    getLignes: grpc.handleUnaryCall<Empty, Lignes>;
}
/**
 * @grpc/grpc-js definition for the protobuf service metro_boulot_dodo.DataService.
 *
 * Usage: Implement the interface IDataService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IDataService = ...
 * server.addService(dataServiceDefinition, service);
 * ```
 */
export const dataServiceDefinition: grpc.ServiceDefinition<IDataService> = {
    getGares: {
        path: "/metro_boulot_dodo.DataService/GetGares",
        originalName: "GetGares",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Gares.fromBinary(bytes),
        requestDeserialize: bytes => Empty.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Gares.toBinary(value)),
        requestSerialize: value => Buffer.from(Empty.toBinary(value))
    },
    getIntergares: {
        path: "/metro_boulot_dodo.DataService/GetIntergares",
        originalName: "GetIntergares",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Intergares.fromBinary(bytes),
        requestDeserialize: bytes => Empty.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Intergares.toBinary(value)),
        requestSerialize: value => Buffer.from(Empty.toBinary(value))
    },
    getStations: {
        path: "/metro_boulot_dodo.DataService/GetStations",
        originalName: "GetStations",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Stations.fromBinary(bytes),
        requestDeserialize: bytes => Empty.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Stations.toBinary(value)),
        requestSerialize: value => Buffer.from(Empty.toBinary(value))
    },
    getLignes: {
        path: "/metro_boulot_dodo.DataService/GetLignes",
        originalName: "GetLignes",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Lignes.fromBinary(bytes),
        requestDeserialize: bytes => Empty.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Lignes.toBinary(value)),
        requestSerialize: value => Buffer.from(Empty.toBinary(value))
    }
};
/**
 * @generated from protobuf service metro_boulot_dodo.DijkstraService
 */
export interface IDijkstraService extends grpc.UntypedServiceImplementation {
    /**
     * @generated from protobuf rpc: GetShortestPath(metro_boulot_dodo.ShortestPathRequest) returns (metro_boulot_dodo.ShortestPathResponse);
     */
    getShortestPath: grpc.handleUnaryCall<ShortestPathRequest, ShortestPathResponse>;
}
/**
 * @grpc/grpc-js definition for the protobuf service metro_boulot_dodo.DijkstraService.
 *
 * Usage: Implement the interface IDijkstraService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IDijkstraService = ...
 * server.addService(dijkstraServiceDefinition, service);
 * ```
 */
export const dijkstraServiceDefinition: grpc.ServiceDefinition<IDijkstraService> = {
    getShortestPath: {
        path: "/metro_boulot_dodo.DijkstraService/GetShortestPath",
        originalName: "GetShortestPath",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => ShortestPathResponse.fromBinary(bytes),
        requestDeserialize: bytes => ShortestPathRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(ShortestPathResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(ShortestPathRequest.toBinary(value))
    }
};
/**
 * @generated from protobuf service metro_boulot_dodo.KruskalService
 */
export interface IKruskalService extends grpc.UntypedServiceImplementation {
    /**
     * @generated from protobuf rpc: GetMinimumSpanningTree(metro_boulot_dodo.Empty) returns (metro_boulot_dodo.Image);
     */
    getMinimumSpanningTree: grpc.handleUnaryCall<Empty, Image>;
    /**
     * @generated from protobuf rpc: GetFullTree(metro_boulot_dodo.Empty) returns (metro_boulot_dodo.Image);
     */
    getFullTree: grpc.handleUnaryCall<Empty, Image>;
}
/**
 * @grpc/grpc-js definition for the protobuf service metro_boulot_dodo.KruskalService.
 *
 * Usage: Implement the interface IKruskalService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IKruskalService = ...
 * server.addService(kruskalServiceDefinition, service);
 * ```
 */
export const kruskalServiceDefinition: grpc.ServiceDefinition<IKruskalService> = {
    getMinimumSpanningTree: {
        path: "/metro_boulot_dodo.KruskalService/GetMinimumSpanningTree",
        originalName: "GetMinimumSpanningTree",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Image.fromBinary(bytes),
        requestDeserialize: bytes => Empty.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Image.toBinary(value)),
        requestSerialize: value => Buffer.from(Empty.toBinary(value))
    },
    getFullTree: {
        path: "/metro_boulot_dodo.KruskalService/GetFullTree",
        originalName: "GetFullTree",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Image.fromBinary(bytes),
        requestDeserialize: bytes => Empty.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Image.toBinary(value)),
        requestSerialize: value => Buffer.from(Empty.toBinary(value))
    }
};
/**
 * @generated from protobuf service metro_boulot_dodo.CanvasService
 */
export interface ICanvasService extends grpc.UntypedServiceImplementation {
    /**
     * @generated from protobuf rpc: GetCanvas(metro_boulot_dodo.CanvasDrawRequest) returns (metro_boulot_dodo.Image);
     */
    getCanvas: grpc.handleUnaryCall<CanvasDrawRequest, Image>;
}
/**
 * @grpc/grpc-js definition for the protobuf service metro_boulot_dodo.CanvasService.
 *
 * Usage: Implement the interface ICanvasService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: ICanvasService = ...
 * server.addService(canvasServiceDefinition, service);
 * ```
 */
export const canvasServiceDefinition: grpc.ServiceDefinition<ICanvasService> = {
    getCanvas: {
        path: "/metro_boulot_dodo.CanvasService/GetCanvas",
        originalName: "GetCanvas",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Image.fromBinary(bytes),
        requestDeserialize: bytes => CanvasDrawRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Image.toBinary(value)),
        requestSerialize: value => Buffer.from(CanvasDrawRequest.toBinary(value))
    }
};
